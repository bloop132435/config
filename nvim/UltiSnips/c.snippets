
snippet for "for loop" Abt
for(${1:int} ${2:i} = ${3:0};$2${4:<n};$2${5:++}) {
	$6
}
endsnippet

snippet if "if statement" Abt
if($1) {
	$2
}
endsnippet
snippet elif "else if statement" Abt
else if($1) {
	$2
}
endsnippet
snippet else "else statement" Abt
else {
	$1
}
endsnippet


global !p
def create_row_placeholders(snip):
	# retrieving single line from current string and treat it like tabstops
	# count
	placeholders_amount = int(snip.buffer[snip.line].split(' ')[-1].split(';')[0])
	line = snip.buffer[snip.line]
	indent = re.match(r"^\s*",line).group()

	# erase current line
	snip.buffer[snip.line] = ''

	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_body = indent + '{' + ', '.join(['$' + str(i+1)
									for i in range(placeholders_amount)]) + '}'

	# expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal

post_jump "create_row_placeholders(snip)"
snippet "arr(\d+)" "array placeholder" r
`!p snip.rv = match.group(1)`
endsnippet

global !p
import re
def caseCreate(snip):
	line = snip.buffer[snip.line]
	n = int(snip.buffer[snip.line].strip())
	snip.buffer[snip.line] = ''
	indent = re.match(r"^\s*",line).group()
	snippet = indent + "switch($1){\n"
	for i in range(n):
		c = 2 + 2 * i
		b = c + 1
		if i == n-1:
			case = indent + f"default:\n" + indent + '\t' + f"${c}\n" + indent + '\t' + "break;\n"
		else:
			case = indent + f"case ${c}:\n" + indent + '\t' + f"${b}\n" + indent + '\t' + "break;\n"
		snippet += case
	snippet +=  indent + '}'
	snip.expand_anon(snippet)
endglobal

post_jump "caseCreate(snip)"
snippet "sw(\d+)" "multiple switch case" r
`!p snip.rv = match.group(1)`
endsnippet


